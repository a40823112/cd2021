<h1>Introduction</h1>
<p>Github : <a href="https://github.com/a40823112">40823112</a></p>
<p>Repository : <a href="https://github.com/a40823112/cd2021">cd2021 </a></p>
<p>Website : <a href="https://a40823112.github.io/cd2021/content/index.html">cd2021 website</a></p>
<p>Group r<span>epository : <a href="https://github.com/a40823112/stage1-ag10">stage1-ag10</a> , <a href="https://github.com/a40823112/stage2-ag1">stage2-ag1</a></span></p>
<p><span>Group website : </span><a href="https://a40823112.github.io/stage1-ag10/content/index.html">stage1-ag10</a> , <a href="https://a40823112.github.io/stage2-ag1/content/index.html">stage2-ag1</a></p>
<p>Stage1-Job description: coppeliasim模擬、reveal.js與PDF報告製作、倉儲網頁編輯</p>
<p><span>Stage2-Job description: coppeliasim模擬、reveal.js製作、倉儲網頁編輯</span></p>
<h1>Collaboration</h1>
<p><span>何謂協同??</span></p>
<p><span>協同設計與版次管理能夠有效提升團隊工作效率，降低內容互相覆蓋，最終造成無法辨識是誰更改內容的情況。</span></p>
<p><span>每一個協同者製作與更改的項目都會顯示在上面，不怕後者更新會覆蓋前者所製作的，還能輕易地找出之前所做的每一項目。</span></p>
<p><a href="http://mde.tw/cd2021/downloads/stage3/stage3_2a.txt">與組長協同倉儲教學</a></p>
<p><span><img alt="" height="619" src="/images/Synergy-1.jpg" width="850"/></span></p>
<p><span></span>(此圖為40823145在 stage2 ag1 所製作)</p>
<p></p><h1>Course Content</h1>
<h2>W1</h2>
<h3>利用SSH維護倉儲</h3>
<p><strong><span color="blue" size="3" style="color: blue; font-size: large;">新增鑰匙:</span></strong></p>
<p><strong>Step1: </strong>使用編輯器進入shell命令環境</p>
<p><img alt="" height="316" src="/images/ssh 1.jpg" width="600"/></p>
<p><strong>Step2:</strong>輸入指令，在<em><strong>y/tmp/key/id_rsa</strong></em>目錄下新增id_rsa與id_rsa等<strong>private key</strong>與<strong>public key</strong></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">ssh-keygen -t rsa -b 4096 -C "學號"
</pre>
<p><img alt="" height="316" src="/images/ssh 2.jpg" width="600"/></p>
<p><strong>Step3:</strong>開啟Y/Putty目錄下的<strong>puttygen.exe</strong>將id_rsa轉為Putty可解讀的.ppk格式</p>
<p><img alt="" height="588" src="/images/ssh3.jpg" width="600"/></p>
<p><strong>Step4:</strong>將<strong>public key</strong>利用scite開啟，在工具列中<strong>Options-Wrap</strong>就可見完整的檔案內容</p>
<p><strong>Step5:</strong>將內容複製後，開啟<strong>github settings</strong>中的<strong>SSH and GPD keys</strong></p>
<p><strong><img alt="" height="502" src="/images/ssh4.jpg" width="301"/></strong></p>
<p>選擇<strong> New SSH keys</strong></p>
<p><strong><img alt="" height="146" src="/images/ssh5.jpg" width="654"/></strong></p>
<p>將複製內容放入KEY的空格</p>
<p><img alt="" height="341" src="/images/ssh6.jpg" width="600"/></p>
<p><strong><span color="blue" size="3" style="color: blue; font-size: large;">設定Putty:</span></strong></p>
<p><strong>Step1:</strong>修改<strong>start.bat</strong>設定，新增</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">set GIT_HOME=%Disk%:\portablegit\bin\
set GIT_SSH=%Disk%:\putty\plink.exe</pre>
<p><strong>Step2:</strong>設定<strong>y/home/.shh</strong>中的<strong>config</strong></p>
<p><strong><img alt="" height="671" src="/images/ssh config.jpg" width="600"/></strong></p>
<p><strong>Step3:</strong>將倉儲中.git目錄下的config連線設定，由https更改為ssh連線</p>
<p><img alt="" height="672" src="/images/ssh url.jpg" width="600"/></p>
<p><strong>Step4:</strong>開啟 <strong>Putty.exe</strong></p>
<p><strong><img alt="" height="467" src="/images/putty exe.jpg" width="600"/></strong></p>
<p><strong>Step5:Load github.com</strong></p>
<p><strong><img alt="" height="588" src="/images/putty exe1.jpg" width="600"/></strong></p>
<p><strong>Step6:</strong>進入<strong>Connection/SSH/Auth</strong>選擇之前創的Key</p>
<p><img alt="" height="583" src="/images/putty exe2.jpg" width="600"/></p>
<p><strong>Step7:</strong>回到<strong>Session按save</strong></p>
<p><strong><img alt="" height="584" src="/images/putty exe3.jpg" width="600"/></strong></p>
<p><strong>Step8:</strong>按下<strong>open</strong>後就可進行push</p>
<p></p>
<h3>建立倉儲</h3>
<p><strong>Step1:</strong>在mdecourse的cmstemplate倉儲下按<em><strong>Use this template</strong></em></p>
<p><em><strong><img alt="" height="444" src="/images/step1.jpg" width="600"/></strong></em></p>
<p><strong>Step2:</strong>在<em><strong>Repository name</strong></em>中輸入cd2021</p>
<p><img alt="" height="434" src="/images/step2.jpg" width="600"/></p>
<p><strong>Step3:</strong>在Y槽的tmp目錄下clone倉儲，在編輯器中輸入</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git clone --recurse-submodules https://github.com/學號/cd2021.git</pre>
<p><strong>Step4:</strong>利用編輯器在cd2021目錄下輸入</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">python wsgi.py</pre>
<p><img alt="" height="549" src="/images/step4.jpg" width="600"/></p>
<p>倉儲建立完成</p>
<h3>建立Leo編輯Palican</h3>
<p><strong>Step1:</strong>在tmp的目錄下輸入</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">leo</pre>
<p><strong><img alt="" height="312" src="/images/leo step1.jpg" width="600"/></strong></p>
<p><strong>Step2:</strong>若開啟leo時出現此畫面，則需到<em><strong>Y/home/.leo</strong></em>中新增<strong>.leoID的txt文字檔，</strong>內容隨意</p>
<p><img alt="" height="190" src="/images/leo step2.jpg" width="252"/></p>
<p><img alt="" height="456" src="/images/leo step2_1.jpg" width="348"/></p>
<p><strong>Step3:</strong>重新啟動編輯器後就可開啟</p>
<p><img alt="" height="472" src="/images/leo step3.jpg" width="600"/></p>
<p><strong>Step4:</strong>按<em><strong>File</strong></em>中的<em><strong>Open-Outline</strong></em>，選取<em><strong>Y/tmp/cd2021/config/pelican.leo</strong></em></p>
<p><em><strong><img alt="" height="473" src="/images/leo step4.jpg" width="600"/></strong></em></p>
<p><em><strong><img alt="" height="467" src="/images/leo step4_2.jpg" width="600"/></strong></em></p>
<p><strong>Step5:</strong>在<strong>Pelican設定</strong>下的<strong>@edit pelicanconf.py</strong>更改<em><strong>AUTHOR、SITENAME</strong></em></p>
<p><em><strong><img alt="" height="473" src="/images/leo step5.jpg" width="600"/></strong></em></p>
<p><strong>Step6:</strong>更改<strong>@edit publishconf.py</strong>中的<strong>SITEURL</strong></p>
<p><strong><img alt="" height="469" src="/images/leo step6.jpg" width="600"/></strong></p>
<p><strong>Step7:</strong>在<strong>markdown</strong>下更改Blog內容</p>
<p><img alt="" height="476" src="/images/leo step7.jpg" width="600"/></p>
<p><strong>Step8:</strong>更改完後，在編輯器上輸入就可push</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">pelican markdown -o blog -s local_publishconf.py
pelican markdown -o blog -s publishconf.py</pre>
<h3>協同倉儲</h3>
<p><strong>Step 1 :</strong>進入倉儲的setting，並選擇<span>Manage access</span></p>
<p><span><img alt="" height="393" src="/images/Manage access.jpg" width="850"/></span></p>
<p><span><strong>Step 2 :</strong>點選<strong> Invite a collaboratot</strong></span></p>
<p><span><span><img alt="" height="393" src="/images/Invite a collaboratot.jpg" width="850"/></span></span></p>
<p><span><span><strong>Step 3 : 組長與組員互相邀請</strong></span></span></p>
<p><span><span><strong>1.組長 </strong>需輸入組員github名稱</span></span></p>
<p><span><span><strong>2.組員 </strong><span>需輸入組員github名稱</span></span></span></p>
<p><span><span><img alt="" height="319" src="/images/Invite a collaboratot name.jpg" width="532"/></span></span></p>
<p><span><span><strong>Step 4 : </strong>組員clone組長倉儲並在倉儲下輸入 </span></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">git clone --recurse-submodules https://github.com/組長/stage2-ag1.git stage2-ag1      clone組長倉儲
cd stage2-ag1
git remote add 組員 https://github.com/40823145/stage2-ag1.git     git add自己倉儲</pre>
<p></p>
<p>⭐⭐組員在push時，若需要上傳至小組倉儲則輸入<strong>git push ，</strong>而要上傳至自己倉儲時則輸入<strong>git push 組員</strong></p><h2>W2</h2>
<h3>Project production</h3>
<p>與隊友討論後決定製作 <em><strong>Da Vinci's Paddle Boat </strong></em></p>
<p><em><strong><span>進度規劃:</span></strong></em></p>
<p><strong><span>W2:</span></strong>討論與繪製零件圖</p>
<p><strong>W3:</strong>進行coppeliasim模擬、網頁與報告製作</p>
<p><strong>W4:</strong>網頁報告與製作</p>
<p><em><strong><img alt="" height="301" src="/images/介紹圖.jpg" width="545"/></strong></em></p>
<h3>手繪草稿</h3>
<p>1.與組員討論的初期手稿:</p>
<p><img alt="" height="800" src="/images/手稿1.jpg" width="600"/></p>
<p>2.發現左右兩齒輪旋轉方向不同而更改草圖</p>
<p><img alt="" height="450" src="/images/手稿2.jpg" width="600"/></p>
<p>3.模擬後發現惰輪會使左右齒輪轉速不同而修改</p>
<p><img alt="" height="1051" src="/images/討論手稿.jpg" width="600"/></p>
<h3>初步設計與討論</h3>
<p>討論船的傳動方式，如何使左右船槳能同方向旋轉。</p>
<p><em><strong><mark>討論結果:</mark></strong></em></p>
<p>在一邊的齒輪上多加一個惰輪更改方向。</p>
<p><img alt="" height="361" src="/images/transmission.jpg" width="600"/></p>
<p><em><strong><mark>初步設計成品:</mark></strong></em></p>
<p>將初步繪出的立體圖放入Coppeliasim進行模擬，找出需要更改設計的地方。</p>
<p><img alt="" height="379" src="/images/Preliminary product.jpg" width="600"/></p>
<h2>W3</h2>
<h3>錯誤排解 齒輪方向與速度</h3>
<p><em><strong><mark>齒輪大小與傳動方式更改</mark></strong></em></p>
<p>模擬後發現因為惰輪大小不同導致做又大齒輪轉速不同，經討論後齒輪改動如下:</p>
<p><strong>手繪草稿:(討論如何使左右齒輪速度、方向相同)</strong></p>
<p><img alt="" height="526" src="/images/討論手稿.jpg" width="300"/></p>
<p><strong>(零件更改後)</strong><img alt="" height="509" src="/images/gear problem.jpg" width="600"/></p>
<h3>錯誤排解 傳動改正</h3>
<p><em><strong><mark>傳動改良</mark></strong></em></p>
<p>齒輪傳動後發現會產生<span>簡諧</span>運動，所以更改齒數及形狀</p>
<p><span> (🔽更改前)</span></p>
<p><span><img alt="" height="302" src="/images/gear before.gif" width="600"/></span></p>
<p><span></span></p>
<p><span>(🔽更改後)</span></p>
<p><span><img alt="" height="384" src="/images/gear after.jpg" width="600"/></span></p>
<p><span>使大齒輪能穩定帶動船槳，而提高位置</span></p>
<p><span><img alt="" height="407" src="/images/葉槳高度.jpg" width="600"/></span></p>
<h3>產品簡化</h3>
<p><em><strong><mark>零件簡化</mark></strong></em></p>
<p>追求最佳化設計，而將沒必要的物件刪除</p>
<p><img alt="" height="407" src="/images/葉槳高度.jpg" width="600"/></p>
<p><img alt="" height="369" src="/images/簡化零件.jpg" width="600"/></p>
<h3>完成品</h3>
<p><img alt="" height="368" src="/images/final.jpg" width="600"/></p>
<h2>W4</h2>
<h3>2D工程圖</h3>
<p><img alt="" height="424" src="/images/0001.jpg" width="600"/></p>
<p><img alt="" height="424" src="/images/0002.jpg" width="600"/></p>
<p><img alt="" height="423" src="/images/工作圖 3_pages-to-jpg-0001.jpg" width="600"/></p>
<h3>3D爆炸圖</h3>
<p><img alt="" height="425" src="/images/1615607118608.jpg" width="600"/></p>
<h3>產品設計報告與影片</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="280" src="https://www.youtube.com/embed/JddkguAVczg" width="560"></iframe></p>
<p><iframe height="550" src="https://drive.google.com/file/d/1F2QnKiK1PEwBbCzvEWrdgl_EwHinTfI3/preview" width="1000"></iframe></p>
<h2>W5</h2>
<h3>Stage2 Grouping</h3>
<p>進行分組與討論Stage2的產品設計。</p>
<p><strong>組員:</strong></p>
<p>40823108 <span>Repository: </span><a href="https://github.com/40823108/cd2021">40823108</a> W<span>ebsite</span><span>: </span><a href="https://40823108.github.io/cd2021">40823108</a></p>
<p>40823109<span> </span><span>Repository: </span><a href="https://github.com/40823109/cd2021">40823109</a> <span>W</span><span>ebsite</span><span>: </span><a href="https://40823109.github.io/cd2021">40823109</a></p>
<p>40823112<span> </span><span>Repository: </span><a href="https://github.com/a40823112/cd2021">40823112</a> <span>W</span><span>ebsite</span><span>: </span><a href="https://a40823112.github.io/cd2021">40823112</a></p>
<p>40823145<span> </span><span>Repository: </span><a href="https://github.com/40823145/cd2021">40823145</a> <span>W</span><span>ebsite</span><span>: </span><a href="https://40823145.github.io/cd2021">40823145</a></p>
<h3>進度規劃</h3>
<p><strong>W6: </strong>小組主題討論、<span>C</span><span>oppeliasim方向鍵操控模擬</span></p>
<p><strong>W7:</strong> C<span>oppeliasim方向鍵操控與傳感器模擬</span></p>
<p><strong>W8: </strong>Coppeliasim傳<span>感器</span>模擬、<span>網頁報告與製作</span></p>
<p><strong>W9: </strong>網頁報告與製作</p>
<h2>W6</h2>
<h3>討論</h3>
<p>分組討論完，決定Stage2的<span>產品設計內容，為Stage1-ag1的產品進行改良，並新增其它功能:</span></p>
<p><em><strong>1.利用鍵盤方向鍵操控</strong></em></p>
<p><em><strong>2.增加接近傳感器使產品自動行走時，不會撞到障礙物</strong></em></p>
<p></p>
<p><em><img alt="" height="471" src="https://a40823112.github.io/stage2-ag1/images/EV3-6.jpg" width="837"/></em></p>
<h2>W7</h2>
<h3>Coppeliasim方向鍵操控模擬</h3>
<p><span><img alt="" height="402" src="/images/方向鍵模擬.gif" width="800"/></span></p>
<p><span>(</span><span>🔽程式碼</span><span>)</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init() 
    left_handle= sim.getObjectHandle('left_m')
    right_handle= sim.getObjectHandle('right_m')
    MaxVel=2
    leftvelocity=0
    rightvelocity=0
    dVel=0.5;
    sim.setJointTargetVelocity(left_handle,leftvelocity)
    sim.setJointTargetVelocity(right_handle,rightvelocity)
end
 
function sysCall_actuation() 
    message,auxiliaryData=sim.getSimulatorMessage()
    while message~=-1 do
        if (message==sim.message_keypress) then
            if (auxiliaryData[1]==32) then
                -- right key
                leftvelocity=0
                rightvelocity=0
                sim.setJointForce(left_front_handle, 0)
                sim.setJointForce(right_front_handle, 0)
                break
            else
                sim.setJointForce(left_handle, 10000)
                sim.setJointForce(right_handle, 10000)
            end
            if (auxiliaryData[1]==2007) then
                -- up key
                leftvelocity=(leftvelocity+rightvelocity)/2
                rightvelocity=leftvelocity
                leftvelocity=leftvelocity+dVel
                rightvelocity=rightvelocity+dVel
            end
            if (auxiliaryData[1]==2008) then
                -- down key
                leftvelocity=(leftvelocity+rightvelocity)/2
                rightvelocity=leftvelocity
                leftvelocity=leftvelocity-dVel
                rightvelocity=rightvelocity-dVel
            end
            if (auxiliaryData[1]==2009) then
                -- left key
                leftvelocity=leftvelocity-dVel
                rightvelocity=rightvelocity+dVel
            end
            if (auxiliaryData[1]==2010) then
                -- right key
                leftvelocity=leftvelocity+dVel
                rightvelocity=rightvelocity-dVel
            end
        end
        message,auxiliaryData=sim.getSimulatorMessage()
    end
     
    if leftvelocity&gt;MaxVel then
        leftvelocity=MaxVel
    end
    if leftvelocity&lt;-MaxVel then
        leftvelocity=-MaxVel
    end
     
    if rightvelocity&gt;MaxVel then
                rightvelocity=MaxVel
    end
    if rightvelocity&lt;-MaxVel then
                rightvelocity=-MaxVel
    end
     
    sim.setJointTargetVelocity(left_handle,leftvelocity)
    sim.setJointTargetVelocity(right_handle,rightvelocity)
     
end</pre>
<h3>模擬問題與排解</h3>
<p><strong>問題:</strong><span> </span>當本體開啟運動模擬時會產生錯誤，導致產品解體</p>
<p><strong><img alt="" height="433" src="/images/HnHbWHruYE.gif" width="800"/></strong></p>
<p><strong>問題原因:</strong><span> </span>討論後發現，產品的模擬干涉太多使其無法正常運作，原因是產品的輪子跟球體上並不是完整的圓，而是由許多正方形的小格子所構成，所以在模擬時產生過多的干涉影響電腦正常模擬，因而模擬錯誤。</p>
<p><img alt="" height="697" src="/images/輪子改善.jpg" width="800"/></p>
<p><strong>問題排解:</strong><span><span> 在coppeliasim內 add-&gt;primitive shape-&gt;Cylinder 增添簡化圖形來代替原本的車輪，而原本的輪子就做為Disc的造型。</span></span></p>
<p><span><span><img alt="" height="392" src="https://a40823112.github.io/stage2-ag1/images/w7%E6%94%B9%E5%96%84.jpg" width="400"/></span></span></p>
<p><span><span><img alt="" height="125" src="https://a40823112.github.io/stage2-ag1/images/w7%E6%94%B9%E5%96%84%E6%8E%92%E5%88%97.jpg" width="200"/></span></span></p>
<p><span><span><img alt="" height="701" src="https://a40823112.github.io/stage2-ag1/images/w7%E6%94%B9%E5%96%84skin.jpg" width="600"/></span></span></p>
<p></p>
<h2>W8</h2>
<h3>Coppeliasim避障自走車</h3>
<p><strong>模擬影片</strong></p>
<p><img alt="" height="327" src="/images/障礙物模擬.gif" width="650"/></p>
<p><span>(</span><span>🔽程式碼</span><span>)</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init()
     
     
end
 
function sysCall_actuation()
     
end
 
function sysCall_sensing()
     
end
 
function sysCall_cleanup()
     
end
 
 
 
function sysCall_afterDelete(inData)
    for key,value in pairs(inData.objectHandles) do
        print("Object with handle "..key.." was deleted")
    end
     
end
 
function sysCall_afterCreate(inData)
    for key,value in pairs(inData.objectHandles) do
        print("Object with handle "..value.." was created")
    end
end
--]]
function speedChange_callback(ui,id,newVal)
    speed=minMaxSpeed[1]+(minMaxSpeed[2]-minMaxSpeed[1])*newVal/100
end
 
function sysCall_init()
     
    bubbleRobBase=sim.getObjectAssociatedWithScript(sim.handle_self) 
    leftMotor=sim.getObjectHandle("bubbleRob_leftMotor") 
    rightMotor=sim.getObjectHandle("bubbleRob_rightMotor") 
    noseSensor=sim.getObjectHandle("bubbleRob_sensingNose") 
    minMaxSpeed={120*math.pi/180,300*math.pi/180} 
    backUntilTime=-1 
    
        xml = '&lt;ui activate="false" closeable="false" resizeable="false" title="'..sim.getObjectName(bubbleRobBase)..' speed"&gt;'..[[
        &lt;hslider id="1" maximum="100" minimum="0" onchange="speedChange_callback"&gt;&lt;/hslider&gt;
        &lt;label style="* {margin-left: 300px;" text=""&gt;&lt;/label&gt;
        &lt;/ui&gt;
        ]]
    ui=simUI.create(xml)
    speed=(minMaxSpeed[1]+minMaxSpeed[2])*1
    simUI.setSliderValue(ui,1,100*(speed-minMaxSpeed[1])/(minMaxSpeed[2]-minMaxSpeed[1]))
end
 
function sysCall_actuation()
    result=sim.readProximitySensor(noseSensor) 
     
    if (result&gt;0) then backUntilTime=sim.getSimulationTime()+4 end 
 
    if (backUntilTime&lt;sim.getSimulationTime()) then
         
        sim.setJointTargetVelocity(leftMotor,speed)
        sim.setJointTargetVelocity(rightMotor,speed)
    else
         
        sim.setJointTargetVelocity(leftMotor,-speed/5)
        sim.setJointTargetVelocity(rightMotor,-speed/200)
    end
end
 
function sysCall_cleanup()
    simUI.destroy(ui)
end</pre>
<p><br/><br/></p>
<h3>模擬問題和排解</h3>
<p><img alt="" height="327" src="/images/感測無法做動.gif" width="650"/></p>
<p><strong>問題原因:</strong>與組員討論後發現，<span>感測器都沒有發生問題，不會做動的原因是程式打錯才無法驅動馬達。</span></p>
<p></p>
<p><strong>問題排解:</strong>更改產品物件的程式碼即可。</p>
<h2>W9</h2>
<h3>產品報告與模擬影片</h3>
<p><strong>方向鍵控制模擬</strong></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="315" src="https://www.youtube.com/embed/7jbkQGgWKrI" title="YouTube video player" width="560"></iframe></p>
<p><strong>感測器模擬</strong></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="315" src="https://www.youtube.com/embed/7FvVDsfVPIU" title="YouTube video player" width="560"></iframe></p>
<p><strong>PDF報告</strong></p>
<p><iframe data-mce-fragment="1" height="550" src="https://drive.google.com/file/d/1wedmypm9So7cyReRNaWF2WhBN8PPUgsP/preview" width="1000"></iframe></p>
<h2>W10</h2>
<h3>Task 1</h3>
<p><span>讀取 <a href="http://mde.tw/cd2021/downloads/stage3/stage3_2a.txt">stage3_2a.txt</a> , 建立 Stage3 的分組倉儲, 分組網頁, 以及各組員倉儲及網頁連結。</span></p>
<p><span>(此程式由Stage3-ag1組長 40823131 所製作)</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># open file, default is read mode, since txt content no chinese char4
# no encoding = "UTF-08" is needed
with open("123.txt") as fh:
    #匯入txt內容
    data = fh.readlines()
    data = [a.replace('4823122','40823122') for a in data]
    #由於22號座號打錯少打0，給後傳回data
    data = [b.replace('\t\t\t\t','') for b in data]
    #第三組的組員只有6人，多讀取了四個空格，因此多了四個\t，將其刪除後匯入data
    print(data)
for i in range(len(data)):
    #(len(data))=6，共有六組
    group = data[i].rstrip("\n").split("\t")
    #刪除data中的\n，並將\t作為分隔的依據
    print('&lt;p&gt;'+group[0]+'|&lt;a href="https://'+group[1]+'.github.io/stage3-ag'+group[0][9]+'"&gt;網站&lt;/a&gt;|&lt;a href="https://github.com/'+group[2]+'/stage3-ag'+group[0][9]+'"&gt;倉儲&lt;/a&gt;&lt;/p&gt;')
#用for迴圈增添每個小組的超連結網址
#print : 將字串顯示在螢幕上
#group[0] :文字檔中每一條第一個值、[1]:文字檔中每一條第二個值
#group[0][9]:文字檔中每一條第一個值的第九位
 
    for z in range(2,18,2):
    #range(2,18,2):選取文字檔中的第2格到第18格，每跳兩格選一次
        try:
            print('&lt;p&gt;'+group[z]+'|Website:'+'&lt;a href="https://'+group[z]+'.github.io/cd2021'+'"&gt;'+group[z]+'&lt;/a&gt;'+'|Repository:'+'&lt;a href="https://github.com/'+group[z]+'/cd2021'+'"&gt;'+group[z]+'&lt;/a&gt;&lt;/p&gt;')
            #用for迴圈增添每個組員的超連結網址
            #group[z] : 選取z跳的值
        except:
            continue
            #由於有一組是6人，在執行程式時會超出範圍影響輸出，所以需用try execot解決</pre>
<p></p>
<h2>W11</h2>
<h3>task 2-1</h3>
<h3>task 2-2</h3>
<h1>Product Drawing</h1>
<h2>stage1-ag10</h2>
<p>Inventor:<a href="https://drive.google.com/drive/folders/1OMjDAU-FfpDeHJmzYHOAeyjqFkp-jZ64?usp=sharing">達爾文船零件圖檔</a></p>
<p><img alt="" height="547" src="/images/下載.png" width="600"/></p>
<p>Coppeliasim:<a href="https://drive.google.com/file/d/1oUa0TqjUl8eEl164-AIq4JRf0pyS5H_n/view?usp=sharing">達爾文船模擬圖檔</a></p>
<p><img alt="" height="368" src="/images/final.jpg" width="600"/></p>
<h2>stage2-ag1</h2>