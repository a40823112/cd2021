var tipuesearch = {"pages": [{'title': 'Introduction', 'text': 'Github :  40823112 \n Repository :  cd2021  \n Website :  cd2021 website \n Group r epository :  stage1-ag10 \xa0,\xa0 stage2-ag1 \xa0\xa0,\xa0 stage3-ag1 \n Group website :\xa0 stage1-ag10 \xa0,\xa0 stage2-ag1 \xa0 \xa0,\xa0 stage3-ag1 \n Stage1-Job description: coppeliasim模擬、reveal.js與PDF報告製作、倉儲網頁編輯 \n Stage2-Job description:\xa0coppeliasim模擬、reveal.js製作、倉儲網頁編輯 \n Stage3-Job description: coppeliasim模擬和程式編寫', 'tags': '', 'url': 'Introduction.html'}, {'title': 'Collaboration', 'text': '何謂協同?? \n 協同設計與版次管理能夠有效提升團隊工作效率，降低內容互相覆蓋，最終造成無法辨識是誰更改內容的情況。 \n 每一個協同者製作與更改的項目都會顯示在上面，不怕後者更新會覆蓋前者所製作的，還能輕易地找出之前所做的每一項目。 \n 與組長協同倉儲教學 \n \n (此圖為40823145在 stage2 ag1 所製作) \n \n', 'tags': '', 'url': 'Collaboration.html'}, {'title': 'Stage 1', 'text': '', 'tags': '', 'url': 'Stage 1.html'}, {'title': 'W1', 'text': '', 'tags': '', 'url': 'W1.html'}, {'title': '利用SSH維護倉儲', 'text': '新增鑰匙: \n Step1:  使用編輯器進入shell命令環境 \n \n Step2: 輸入指令，在 y/tmp/key/id_rsa 目錄下新增id_rsa與id_rsa等 private key 與 public key \n ssh-keygen -t rsa -b 4096 -C "學號"\n \n \n Step3: 開啟Y/Putty目錄下的 puttygen.exe 將id_rsa轉為Putty可解讀的.ppk格式 \n \n Step4: 將 public key 利用scite開啟，在工具列中 Options-Wrap 就可見完整的檔案內容 \n Step5: 將內容複製後，開啟 github settings 中的 SSH and GPD keys \n \n 選擇  New SSH keys \n \n 將複製內容放入KEY的空格 \n \n 設定Putty: \n Step1: 修改 start.bat 設定，新增 \n set GIT_HOME=%Disk%:\\portablegit\\bin\\\nset GIT_SSH=%Disk%:\\putty\\plink.exe \n Step2: 設定 y/home/.shh 中的 config \n \n Step3: 將倉儲中.git目錄下的config連線設定，由https更改為ssh連線 \n \n Step4: 開啟  Putty.exe \n \n Step5:Load github.com \n \n Step6: 進入 Connection/SSH/Auth 選擇之前創的Key \n \n Step7: 回到 Session按save \n \n Step8: 按下 open 後就可進行push \n \n', 'tags': '', 'url': '利用SSH維護倉儲.html'}, {'title': '建立倉儲', 'text': 'Step1: 在mdecourse的cmstemplate倉儲下按 Use this template \n \n Step2: 在 Repository name 中輸入cd2021 \n \n Step3: 在Y槽的tmp目錄下clone倉儲，在編輯器中輸入 \n git clone --recurse-submodules https://github.com/學號/cd2021.git \n Step4: 利用編輯器在cd2021目錄下輸入 \n python wsgi.py \n \n 倉儲建立完成 \n', 'tags': '', 'url': '建立倉儲.html'}, {'title': '建立Leo編輯Palican', 'text': 'Step1: 在tmp的目錄下輸入 \n leo \n \n Step2: 若開啟leo時出現此畫面，則需到 Y/home/.leo 中新增 .leoID的txt文字檔， 內容隨意 \n \n \n Step3: 重新啟動編輯器後就可開啟 \n \n Step4: 按 File 中的 Open-Outline ，選取 Y/tmp/cd2021/config/pelican.leo \n \n \n Step5: 在 Pelican設定 下的 @edit pelicanconf.py 更改 AUTHOR、SITENAME \n \n Step6: 更改 @edit publishconf.py 中的 SITEURL \n \n Step7: 在 markdown 下更改Blog內容 \n \n Step8: 更改完後，在編輯器上輸入就可push \n pelican markdown -o blog -s local_publishconf.py\npelican markdown -o blog -s publishconf.py \n', 'tags': '', 'url': '建立Leo編輯Palican.html'}, {'title': '協同倉儲', 'text': 'Step 1 : 進入倉儲的setting，並選擇 Manage access \n \n Step 2 : 點選  Invite a collaboratot \n \n Step 3 : 組長與組員互相邀請 \n 1.組長\xa0 需輸入組員github名稱 \n 2.組員\xa0 需輸入組員github名稱 \n \n Step 4 :\xa0 組員clone組長倉儲並在倉儲下輸入\xa0 \n git clone --recurse-submodules https://github.com/組長/stage2-ag1.git stage2-ag1      clone組長倉儲\ncd stage2-ag1\ngit remote add 組員 https://github.com/40823145/stage2-ag1.git     git add自己倉儲 \n \n ⭐⭐組員在push時，若需要上傳至小組倉儲則輸入 git push ， 而要上傳至自己倉儲時則輸入 git push 組員 \n', 'tags': '', 'url': '協同倉儲.html'}, {'title': 'W2', 'text': '', 'tags': '', 'url': 'W2.html'}, {'title': 'Project production', 'text': "與隊友討論後決定製作  Da Vinci's Paddle Boat\xa0 \n 進度規劃: \n W2: 討論與繪製零件圖 \n W3: 進行coppeliasim模擬、網頁與報告製作 \n W4: 網頁報告與製作 \n \n", 'tags': '', 'url': 'Project production.html'}, {'title': '手繪草稿', 'text': '1.與組員討論的初期手稿: \n \n 2.發現左右兩齒輪旋轉方向不同而更改草圖 \n \n 3.模擬後發現惰輪會使左右齒輪轉速不同而修改 \n \n', 'tags': '', 'url': '手繪草稿.html'}, {'title': '初步設計與討論', 'text': '討論船的傳動方式，如何使左右船槳能同方向旋轉。 \n 討論結果: \n 在一邊的齒輪上多加一個惰輪更改方向。 \n \n 初步設計成品: \n 將初步繪出的立體圖放入Coppeliasim進行模擬，找出需要更改設計的地方。 \n \n', 'tags': '', 'url': '初步設計與討論.html'}, {'title': 'W3', 'text': '', 'tags': '', 'url': 'W3.html'}, {'title': '錯誤排解 齒輪方向與速度', 'text': '齒輪大小與傳動方式更改 \n 模擬後發現因為惰輪大小不同導致做又大齒輪轉速不同，經討論後齒輪改動如下: \n 手繪草稿:(討論如何使左右齒輪速度、方向相同) \n \n (零件更改後) \n', 'tags': '', 'url': '錯誤排解 齒輪方向與速度.html'}, {'title': '錯誤排解 傳動改正', 'text': '傳動改良 \n 齒輪傳動後發現會產生 簡諧 運動，所以更改齒數及形狀 \n \xa0(🔽更改前) \n \n \n (🔽更改後) \n \n 使大齒輪能穩定帶動船槳，而提高位置 \n \n', 'tags': '', 'url': '錯誤排解 傳動改正.html'}, {'title': '產品簡化', 'text': '零件簡化 \n 追求最佳化設計，而將沒必要的物件刪除 \n \n \n', 'tags': '', 'url': '產品簡化.html'}, {'title': '完成品', 'text': '\n', 'tags': '', 'url': '完成品.html'}, {'title': 'W4', 'text': '', 'tags': '', 'url': 'W4.html'}, {'title': '2D工程圖', 'text': '\n \n \n', 'tags': '', 'url': '2D工程圖.html'}, {'title': '3D爆炸圖', 'text': '\n', 'tags': '', 'url': '3D爆炸圖.html'}, {'title': '產品設計報告與影片', 'text': '\n \n', 'tags': '', 'url': '產品設計報告與影片.html'}, {'title': 'Stage 2', 'text': '', 'tags': '', 'url': 'Stage 2.html'}, {'title': 'W5', 'text': '', 'tags': '', 'url': 'W5.html'}, {'title': 'Stage2\xa0Grouping', 'text': '進行分組與討論Stage2的產品設計。 \n 組員: \n 40823108\xa0 Repository:\xa0 40823108 \xa0W ebsite :\xa0 40823108 \n 40823109 \xa0 Repository:\xa0 40823109 \xa0 W ebsite :\xa0 40823109 \n 40823112 \xa0 Repository:\xa0 40823112 \xa0 W ebsite :\xa0 40823112 \n 40823145 \xa0 Repository:\xa0 40823145 \xa0 W ebsite :\xa0 40823145 \n', 'tags': '', 'url': 'Stage2\xa0Grouping.html'}, {'title': '進度規劃', 'text': 'W6:\xa0 小組主題討論、 C oppeliasim方向鍵操控模擬 \n W7: \xa0C oppeliasim方向鍵操控與傳感器模擬 \n W8:\xa0 Coppeliasim傳 感器 模擬、 網頁報告與製作 \n W9:\xa0 網頁報告與製作 \n', 'tags': '', 'url': '進度規劃.html'}, {'title': 'W6', 'text': '', 'tags': '', 'url': 'W6.html'}, {'title': '討論', 'text': '分組討論完，決定Stage2的 產品設計內容，為Stage1-ag1的產品進行改良，並新增其它功能: \n 1.利用鍵盤方向鍵操控 \n 2.增加接近傳感器使產品自動行走時，不會撞到障礙物 \n \n \n', 'tags': '', 'url': '討論.html'}, {'title': 'W7', 'text': '', 'tags': '', 'url': 'W7.html'}, {'title': 'Coppeliasim方向鍵操控模擬', 'text': "\n ( 🔽程式碼 ) \n function sysCall_init() \n    left_handle= sim.getObjectHandle('left_m')\n    right_handle= sim.getObjectHandle('right_m')\n    MaxVel=2\n    leftvelocity=0\n    rightvelocity=0\n    dVel=0.5;\n    sim.setJointTargetVelocity(left_handle,leftvelocity)\n    sim.setJointTargetVelocity(right_handle,rightvelocity)\nend\n \nfunction sysCall_actuation() \n    message,auxiliaryData=sim.getSimulatorMessage()\n    while message~=-1 do\n        if (message==sim.message_keypress) then\n            if (auxiliaryData[1]==32) then\n                -- right key\n                leftvelocity=0\n                rightvelocity=0\n                sim.setJointForce(left_front_handle, 0)\n                sim.setJointForce(right_front_handle, 0)\n                break\n            else\n                sim.setJointForce(left_handle, 10000)\n                sim.setJointForce(right_handle, 10000)\n            end\n            if (auxiliaryData[1]==2007) then\n                -- up key\n                leftvelocity=(leftvelocity+rightvelocity)/2\n                rightvelocity=leftvelocity\n                leftvelocity=leftvelocity+dVel\n                rightvelocity=rightvelocity+dVel\n            end\n            if (auxiliaryData[1]==2008) then\n                -- down key\n                leftvelocity=(leftvelocity+rightvelocity)/2\n                rightvelocity=leftvelocity\n                leftvelocity=leftvelocity-dVel\n                rightvelocity=rightvelocity-dVel\n            end\n            if (auxiliaryData[1]==2009) then\n                -- left key\n                leftvelocity=leftvelocity-dVel\n                rightvelocity=rightvelocity+dVel\n            end\n            if (auxiliaryData[1]==2010) then\n                -- right key\n                leftvelocity=leftvelocity+dVel\n                rightvelocity=rightvelocity-dVel\n            end\n        end\n        message,auxiliaryData=sim.getSimulatorMessage()\n    end\n     \n    if leftvelocity>MaxVel then\n        leftvelocity=MaxVel\n    end\n    if leftvelocity<-MaxVel then\n        leftvelocity=-MaxVel\n    end\n     \n    if rightvelocity>MaxVel then\n                rightvelocity=MaxVel\n    end\n    if rightvelocity<-MaxVel then\n                rightvelocity=-MaxVel\n    end\n     \n    sim.setJointTargetVelocity(left_handle,leftvelocity)\n    sim.setJointTargetVelocity(right_handle,rightvelocity)\n     \nend \n", 'tags': '', 'url': 'Coppeliasim方向鍵操控模擬.html'}, {'title': '模擬問題與排解', 'text': '問題: \xa0 當本體開啟運動模擬時會產生錯誤，導致產品解體 \n \n 問題原因: \xa0 討論後發現，產品的模擬干涉太多使其無法正常運作，原因是產品的輪子跟球體上並不是完整的圓，而是由許多正方形的小格子所構成，所以在模擬時產生過多的干涉影響電腦正常模擬，因而模擬錯誤。 \n \n 問題排解: \xa0在coppeliasim內 add->primitive shape->Cylinder 增添簡化圖形來代替原本的車輪，而原本的輪子就做為Disc的造型。 \n \n \n \n \n', 'tags': '', 'url': '模擬問題與排解.html'}, {'title': 'W8', 'text': '', 'tags': '', 'url': 'W8.html'}, {'title': 'Coppeliasim避障自走車', 'text': '模擬影片 \n \n ( 🔽程式碼 ) \n function sysCall_init()\n     \n     \nend\n \nfunction sysCall_actuation()\n     \nend\n \nfunction sysCall_sensing()\n     \nend\n \nfunction sysCall_cleanup()\n     \nend\n \n \n \nfunction sysCall_afterDelete(inData)\n    for key,value in pairs(inData.objectHandles) do\n        print("Object with handle "..key.." was deleted")\n    end\n     \nend\n \nfunction sysCall_afterCreate(inData)\n    for key,value in pairs(inData.objectHandles) do\n        print("Object with handle "..value.." was created")\n    end\nend\n--]]\nfunction speedChange_callback(ui,id,newVal)\n    speed=minMaxSpeed[1]+(minMaxSpeed[2]-minMaxSpeed[1])*newVal/100\nend\n \nfunction sysCall_init()\n     \n    bubbleRobBase=sim.getObjectAssociatedWithScript(sim.handle_self) \n    leftMotor=sim.getObjectHandle("bubbleRob_leftMotor") \n    rightMotor=sim.getObjectHandle("bubbleRob_rightMotor") \n    noseSensor=sim.getObjectHandle("bubbleRob_sensingNose") \n    minMaxSpeed={120*math.pi/180,300*math.pi/180} \n    backUntilTime=-1 \n    \n        xml = \'<ui activate="false" closeable="false" resizeable="false" title="\'..sim.getObjectName(bubbleRobBase)..\' speed">\'..[[\n        <hslider id="1" maximum="100" minimum="0" onchange="speedChange_callback"></hslider>\n        <label style="* {margin-left: 300px;" text=""></label>\n        </ui>\n        ]]\n    ui=simUI.create(xml)\n    speed=(minMaxSpeed[1]+minMaxSpeed[2])*1\n    simUI.setSliderValue(ui,1,100*(speed-minMaxSpeed[1])/(minMaxSpeed[2]-minMaxSpeed[1]))\nend\n \nfunction sysCall_actuation()\n    result=sim.readProximitySensor(noseSensor) \n     \n    if (result>0) then backUntilTime=sim.getSimulationTime()+4 end \n \n    if (backUntilTime<sim.getSimulationTime()) then\n         \n        sim.setJointTargetVelocity(leftMotor,speed)\n        sim.setJointTargetVelocity(rightMotor,speed)\n    else\n         \n        sim.setJointTargetVelocity(leftMotor,-speed/5)\n        sim.setJointTargetVelocity(rightMotor,-speed/200)\n    end\nend\n \nfunction sysCall_cleanup()\n    simUI.destroy(ui)\nend \n \n', 'tags': '', 'url': 'Coppeliasim避障自走車.html'}, {'title': '模擬問題和排解', 'text': '\n 問題原因: 與組員討論後發現， 感測器都沒有發生問題，不會做動的原因是程式打錯才無法驅動馬達。 \n \n 問題排解: 更改產品物件的程式碼即可。 \n', 'tags': '', 'url': '模擬問題和排解.html'}, {'title': 'W9', 'text': '', 'tags': '', 'url': 'W9.html'}, {'title': '產品報告與模擬影片', 'text': '方向鍵控制模擬 \n \n 感測器模擬 \n \n PDF報告 \n', 'tags': '', 'url': '產品報告與模擬影片.html'}, {'title': 'Stage 3', 'text': '', 'tags': '', 'url': 'Stage 3.html'}, {'title': 'W10', 'text': '', 'tags': '', 'url': 'W10.html'}, {'title': 'Task 1', 'text': '讀取  stage3_2a.txt \xa0, 建立 Stage3 的分組倉儲, 分組網頁, 以及各組員倉儲及網頁連結。 \n (此程式由Stage3-ag1組長 40823131 所製作) \n # open file, default is read mode, since txt content no chinese char4\n# no encoding = "UTF-08" is needed\nwith open("123.txt") as fh:\n    #匯入txt內容\n    data = fh.readlines()\n    data = [a.replace(\'4823122\',\'40823122\') for a in data]\n    #由於22號座號打錯少打0，給後傳回data\n    data = [b.replace(\'\\t\\t\\t\\t\',\'\') for b in data]\n    #第三組的組員只有6人，多讀取了四個空格，因此多了四個\\t，將其刪除後匯入data\n    print(data)\nfor i in range(len(data)):\n    #(len(data))=6，共有六組\n    group = data[i].rstrip("\\n").split("\\t")\n    #刪除data中的\\n，並將\\t作為分隔的依據\n    print(\'<p>\'+group[0]+\'|<a href="https://\'+group[1]+\'.github.io/stage3-ag\'+group[0][9]+\'">網站</a>|<a href="https://github.com/\'+group[2]+\'/stage3-ag\'+group[0][9]+\'">倉儲</a></p>\')\n#用for迴圈增添每個小組的超連結網址\n#print : 將字串顯示在螢幕上\n#group[0] :文字檔中每一條第一個值、[1]:文字檔中每一條第二個值\n#group[0][9]:文字檔中每一條第一個值的第九位\n \n    for z in range(2,18,2):\n    #range(2,18,2):選取文字檔中的第2格到第18格，每跳兩格選一次\n        try:\n            print(\'<p>\'+group[z]+\'|Website:\'+\'<a href="https://\'+group[z]+\'.github.io/cd2021\'+\'">\'+group[z]+\'</a>\'+\'|Repository:\'+\'<a href="https://github.com/\'+group[z]+\'/cd2021\'+\'">\'+group[z]+\'</a></p>\')\n            #用for迴圈增添每個組員的超連結網址\n            #group[z] : 選取z跳的值\n        except:\n            continue\n            #由於有一組是6人，在執行程式時會超出範圍影響輸出，所以需用try execot解決 \n \n', 'tags': '', 'url': 'Task 1.html'}, {'title': 'W11', 'text': '', 'tags': '', 'url': 'W11.html'}, {'title': 'task 2-1', 'text': 'Stage-ag10 Remote API 操控 \n 由於我們設計的產品只有一個轉軸，所以只須設定一個變數。 \n \n \n CoppeliaSim child script : \n \n threadFunction=function()\n\t-- Put your thread code here (initialization and clean-up code should not be in here)\n\n\t\n\t-- Some EXTERNAL commands (e.g. socket commands provided by Lua libraries)\n\t-- might appear as blocking to the simulator. In that case, you can define\n\t-- a non-blocking section as following example shows:\n\t--\n\t-- sim.setThreadIsFree(true) -- Start of the non-blocking section\n\t--\n\t-- Following 2 lines are meant as an example of EXTERNAL blocking commands:\n\t-- http = require("socket.http")\n\t-- print(http.request("http://www.google.com"))\n\t--\n\t-- sim.setThreadIsFree(false) -- End of the non-blocking section\n\t--\n\t-- While in a non-blocking section, try to avoid calling sim-functions. Also\n\t-- never forget to close the blocking section, otherwise V-REP will hang.\n\t-- Make sure you read the information related to the sim.setThreadIsFree\n\t-- API function in V-REP\'s documentation.\n\n\n\t-- If you wish to synchronize a threaded loop with each simulation pass,\n\t-- set the thread switch timing in the initialization phase of this script\n\t-- to the maximum (200), and manually switch thread here with the\n\t-- sim.switchThread() command. \n\t-- ( sim.switchThread() will suspend this script\'s execution until next\n\t-- simulation pass, i.e. until the simulation time has changed )\n\t--\n\t-- Following example illustrates this:\n\t-- \n\t-- while true do\n\t--     local p=sim.getObjectPosition(objHandle,-1)\n\t--     p[1]=p[1]+0.001\n\t--     sim.setObjectPosition(objHandle,-1,p)\n\t--     sim.switchThread()\n\t-- end\nend\n\n-- Put some initialization code here:\nsim.setThreadSwitchTiming(2) -- Default timing for automatic thread switching\n\n-- Here we execute the regular thread code:\nres,err=xpcall(threadFunction,function(err) return debug.traceback(err) end)\nif not res then\n\tsim.addStatusbarMessage(\'Lua runtime error: \'..err)\nend\n\n-- Put some clean-up code here:\nsimRemoteApi.start(19999)\n \n \n Python Remote API : \n \n import sim as vrep\nimport sys\n# child threaded script: \n#simExtRemoteApiStart(19999)\n \nvrep.simxFinish(-1)\n \nclientID = vrep.simxStart(\'127.0.0.1\', 19999, True, True, 5000, 5)\n \nif clientID!= -1:\n    print("Connected to remote server")\nelse:\n    print(\'Connection not successful\')\n    sys.exit(\'Could not connect\')\n \nerrorCode,boat_motor_handle=vrep.simxGetObjectHandle(clientID,\'boat_motor\',vrep.simx_opmode_oneshot_wait)\n \nif errorCode == -1:\n    print(\'Can not find motor\')\n    sys.exit()\n \nerrorCode=vrep.simxSetJointTargetVelocity(clientID,boat_motor_handle,-10, vrep.simx_opmode_oneshot_wait) \n \n', 'tags': '', 'url': 'task 2-1.html'}, {'title': 'task 2-2', 'text': 'Stage2-ag1 Remote API 操控 \n \n \n CoppeliaSim child script : \n \n threadFunction=function()\n\t-- Put your thread code here (initialization and clean-up code should not be in here)\n\n\t\n\t-- Some EXTERNAL commands (e.g. socket commands provided by Lua libraries)\n\t-- might appear as blocking to the simulator. In that case, you can define\n\t-- a non-blocking section as following example shows:\n\t--\n\t-- sim.setThreadIsFree(true) -- Start of the non-blocking section\n\t--\n\t-- Following 2 lines are meant as an example of EXTERNAL blocking commands:\n\t-- http = require("socket.http")\n\t-- print(http.request("http://www.google.com"))\n\t--\n\t-- sim.setThreadIsFree(false) -- End of the non-blocking section\n\t--\n\t-- While in a non-blocking section, try to avoid calling sim-functions. Also\n\t-- never forget to close the blocking section, otherwise V-REP will hang.\n\t-- Make sure you read the information related to the sim.setThreadIsFree\n\t-- API function in V-REP\'s documentation.\n\n\n\t-- If you wish to synchronize a threaded loop with each simulation pass,\n\t-- set the thread switch timing in the initialization phase of this script\n\t-- to the maximum (200), and manually switch thread here with the\n\t-- sim.switchThread() command. \n\t-- ( sim.switchThread() will suspend this script\'s execution until next\n\t-- simulation pass, i.e. until the simulation time has changed )\n\t--\n\t-- Following example illustrates this:\n\t-- \n\t-- while true do\n\t--     local p=sim.getObjectPosition(objHandle,-1)\n\t--     p[1]=p[1]+0.001\n\t--     sim.setObjectPosition(objHandle,-1,p)\n\t--     sim.switchThread()\n\t-- end\nend\n\n-- Put some initialization code here:\nsim.setThreadSwitchTiming(2) -- Default timing for automatic thread switching\n\n-- Here we execute the regular thread code:\nres,err=xpcall(threadFunction,function(err) return debug.traceback(err) end)\nif not res then\n\tsim.addStatusbarMessage(\'Lua runtime error: \'..err)\nend\n\n-- Put some clean-up code here:\nsimRemoteApi.start(19999)\n \n \n Python Remote API : \n \n import sim as vrep\nimport sys\n# child threaded script: \n#simExtRemoteApiStart(19999)\n \nvrep.simxFinish(-1)\n \nclientID = vrep.simxStart(\'127.0.0.1\', 19999, True, True, 5000, 5)\n \nif clientID!= -1:\n    print("Connected to remote server")\nelse:\n    print(\'Connection not successful\')\n    sys.exit(\'Could not connect\')\n \nerrorCode,left_m_handle=vrep.simxGetObjectHandle(clientID,\'left_m\',vrep.simx_opmode_oneshot_wait)\n \nerrorCode,right_m_handle=vrep.simxGetObjectHandle(clientID,\'right_m\',vrep.simx_opmode_oneshot_wait)\n \nif errorCode == -1:\n    print(\'Can not find left or right motor\')\n    sys.exit()\n \nerrorCode=vrep.simxSetJointTargetVelocity(clientID,left_m_handle,-1, vrep.simx_opmode_oneshot_wait)\nerrorCode=vrep.simxSetJointTargetVelocity(clientID,right_m_handle,-1, vrep.simx_opmode_oneshot_wait)\n \n \n', 'tags': '', 'url': 'task 2-2.html'}, {'title': 'W12', 'text': '', 'tags': '', 'url': 'W12.html'}, {'title': '上課直播', 'text': '1. 如何使用 remote api 來操控stage1和stage2的產品 \n 2. 後面在查詢如何讓coppeliasim中感測器偵測到東西，使我們stage3中的機械手臂做動。 \n \n \n', 'tags': '', 'url': '上課直播.html'}, {'title': 'W13', 'text': '', 'tags': '', 'url': 'W13.html'}, {'title': '小組meeting直播', 'text': '1. 討論stage3在coppeliasim中要如何匯入感測器，以及程式要如何編寫。 \n 2. 討論W13中RobotDk機械手臂是如何做取放動做。 \n \n', 'tags': '', 'url': '小組meeting直播.html'}, {'title': 'RobotDK', 'text': '1.  下載完RobotDK後開啟資料夾內的\xa0 a_start_robodk.bat\xa0 \n 2. 下載老師所提供的\xa0 \xa0 Pick and Place \n 3. 在RobotDK內開啟檔案內的\xa0 Example 02-1 Pick and place with Python.rdk \n 4. 將\xa0 pick_and_place.py\xa0 放入  SciTE  並點選\xa0 Tools-->GO \n ✴ 若發生此情況，需要在編輯器上輸入 \xa0pip install robodk \n \n \n \n 5. 再 點選\xa0 Tools-->GO\xa0 會發現無法做動，那是因為程式裡的  robotdk_ip=\'192.168.19.222\'  為老師的ip位置，要使其運作，需改成自己電腦的ip位置  127.0.0.1 \n \n \n 程式內容: \n # KMOLab Portable RoboDK pick and place\nfrom robolink import *    # API to communicate with robodk\nfrom robodk import *      # robodk robotics toolbox\n\n# Setup global parameters\nBALL_DIAMETER = 100 # diameter of one ball\nAPPROACH = 100      # approach distance to grab each part, in mm\nnTCPs = 6           # number of TCP\'s in the tool\n\n#----------------------------------------------\n# Function definitions\n\ndef box_calc(BALLS_SIDE=4, BALLS_MAX=None):\n    """Calculate a list of points (ball center) as if the balls were stored in a box"""\n    if BALLS_MAX is None: BALLS_MAX = BALLS_SIDE**3\n    xyz_list = []\n    for h in range(BALLS_SIDE):\n        for i in range(BALLS_SIDE):\n            for j in range(BALLS_SIDE):\n                xyz_list = xyz_list + [[(i+0.5)*BALL_DIAMETER, (j+0.5)*BALL_DIAMETER, (h+0.5)*BALL_DIAMETER]]\n                if len(xyz_list) >= BALLS_MAX:\n                    return xyz_list\n    return xyz_list\n\ndef pyramid_calc(BALLS_SIDE=4):\n    """Calculate a list of points (ball center) as if the balls were place in a pyramid"""\n    #the number of balls can be calculated as: int(BALLS_SIDE*(BALLS_SIDE+1)*(2*BALLS_SIDE+1)/6)\n    BALL_DIAMETER = 100\n    xyz_list = []\n    sqrt2 = 2**(0.5)\n    for h in range(BALLS_SIDE):\n        for i in range(BALLS_SIDE-h):\n            for j in range(BALLS_SIDE-h):\n                height = h*BALL_DIAMETER/sqrt2 + BALL_DIAMETER/2\n                xyz_list = xyz_list + [[i*BALL_DIAMETER + (h+1)*BALL_DIAMETER*0.5, j*BALL_DIAMETER + (h+1)*BALL_DIAMETER*0.5, height]]\n    return xyz_list\n\ndef balls_setup(frame, positions):\n    """Place a list of balls in a reference frame. The reference object (ball) must have been previously copied to the clipboard."""\n    nballs = len(positions)\n    step = 1.0/(nballs - 1)\n    for i in range(nballs):\n        newball = frame.Paste()\n        newball.setName(\'ball \' + str(i)) #set item name\n        newball.setPose(transl(positions[i])) #set item position with respect to parent\n        newball.setVisible(True, False) #make item visible but hide the reference frame\n        newball.Recolor([1-step*i, step*i, 0.2, 1]) #set RGBA color\n\ndef cleanup_balls(parentnodes):\n    """Delete all child items whose name starts with \\"ball\\", from the provided list of parent items."""\n    todelete = []\n    for item in parentnodes:\n        todelete = todelete + item.Childs()\n\n    for item in todelete:\n        if item.Name().startswith(\'ball\'):\n            item.Delete()\n\ndef TCP_On(toolitem, tcp_id):\n    """Attach the closest object to the toolitem Htool pose,\n    furthermore, it will output appropriate function calls on the generated robot program (call to TCP_On)"""\n    toolitem.AttachClosest()\n    toolitem.RDK().RunMessage(\'Set air valve %i on\' % (tcp_id+1))\n    toolitem.RDK().RunProgram(\'TCP_On(%i)\' % (tcp_id+1));\n        \ndef TCP_Off(toolitem, tcp_id, itemleave=0):\n    """Detaches the closest object attached to the toolitem Htool pose,\n    furthermore, it will output appropriate function calls on the generated robot program (call to TCP_Off)"""\n    toolitem.DetachAll(itemleave)\n    toolitem.RDK().RunMessage(\'Set air valve %i off\' % (tcp_id+1))\n    toolitem.RDK().RunProgram(\'TCP_Off(%i)\' % (tcp_id+1));\n\n\n#----------------------------------------------------------\n# The program starts here:\n\n# Any interaction with RoboDK must be done through RDK:\nRDK = Robolink(robodk_path="C:/robodk/bin/RoboDK.exe", robodk_ip=\'127.0.0.1\')\n\n# Turn off automatic rendering (faster)\nRDK.Render(False)\n\n#RDK.Set_Simulation_Speed(500); # set the simulation speed\n\n# Gather required items from the station tree\nrobot = RDK.Item(\'Fanuc M-710iC/50\')\nrobot_tools = robot.Childs()\n#robottool = RDK.Item(\'MainTool\')\nframe1 = RDK.Item(\'Table 1\')\nframe2 = RDK.Item(\'Table 2\')\n\n# Copy a ball as an object (same as CTRL+C)\nballref = RDK.Item(\'reference ball\')\nballref.Copy()\n\n# Run a pre-defined station program (in RoboDK) to replace the two tables\nprog_reset = RDK.Item(\'Replace objects\')\nprog_reset.RunProgram()\n\n# Call custom procedure to remove old objects\ncleanup_balls([frame1, frame2])\n\n# Make a list of positions to place the objects\nframe1_list = pyramid_calc(4)\nframe2_list = pyramid_calc(4)\n\n# Programmatically place the objects with a custom-made procedure\nballs_setup(frame1, frame1_list)\n\n# Delete previously generated tools\nfor tool in robot_tools:\n    if tool.Name().startswith(\'TCP\'):\n        tool.Delete()\n        \n# Calculate tool frames for the suction cup tool of 6 suction cups\nTCP_list = []\nfor i in range(nTCPs):\n    TCPi_pose = transl(0,0,100)*rotz((360/nTCPs)*i*pi/180)*transl(125,0,0)*roty(pi/2)\n    TCPi = robot.AddTool(TCPi_pose, \'TCP %i\' % (i+1))\n    TCP_list.append(TCPi)\n\nTCP_0 = TCP_list[0]\n\n# Turn on automatic rendering\nRDK.Render(True)\n\n# Move balls    \nrobot.setPoseTool(TCP_list[0])\nnballs_frame1 = len(frame1_list)\nnballs_frame2 = len(frame2_list)\nidTake = nballs_frame1 - 1\nidLeave = 0\nidTCP = 0\ntarget_app_frame = transl(2*BALL_DIAMETER, 2*BALL_DIAMETER, 4*BALL_DIAMETER)*roty(pi)*transl(0,0,-APPROACH)\n\nwhile idTake >= 0:\n    # ------------------------------------------------------------------\n    # first priority: grab as many balls as possible\n    # the tool is empty at this point, so take as many balls as possible (up to a maximum of 6 -> nTCPs)\n    ntake = min(nTCPs, idTake + 1)\n\n    # approach to frame 1\n    robot.setPoseFrame(frame1)\n    robot.setPoseTool(TCP_0)\n    robot.MoveJ([0,0,0,0,10,-200])\n    robot.MoveJ(target_app_frame)\n\n    # grab ntake balls from frame 1\n    for i in range(ntake):\n        TCPi = TCP_list[i]\n        robot.setPoseTool(TCPi)\n        # calculate target wrt frame1: rotation about Y is needed since Z and X axis are inverted\n        target = transl(frame1_list[idTake])*roty(pi)*rotx(30*pi/180)\n        target_app = target*transl(0,0,-APPROACH)\n        idTake = idTake - 1        \n        robot.MoveL(target_app)\n        robot.MoveL(target)\n        TCP_On(TCPi, i)\n        robot.MoveL(target_app)\n \n    # ------------------------------------------------------------------\n    # second priority: unload the tool     \n    # approach to frame 2 and place the tool balls into table 2\n    robot.setPoseTool(TCP_0)\n    robot.MoveJ(target_app_frame)\n    robot.MoveJ([0,0,0,0,10,-200])\n    robot.setPoseFrame(frame2)    \n    robot.MoveJ(target_app_frame)\n    for i in range(ntake):\n        TCPi = TCP_list[i]\n        robot.setPoseTool(TCPi)\n        if idLeave > nballs_frame2-1:\n            raise Exception("No room left to place objects in Table 2")\n        \n        # calculate target wrt frame1: rotation of 180 about Y is needed since Z and X axis are inverted\n        target = transl(frame2_list[idLeave])*roty(pi)*rotx(30*pi/180)\n        target_app = target*transl(0,0,-APPROACH)\n        idLeave = idLeave + 1        \n        robot.MoveL(target_app)\n        robot.MoveL(target)\n        TCP_Off(TCPi, i, frame2)\n        robot.MoveL(target_app)\n\n    robot.MoveJ(target_app_frame)\n\n# Move home when the robot finishes\nrobot.MoveJ([0,0,0,0,10,-200])\n \n', 'tags': '', 'url': 'RobotDK.html'}, {'title': 'W14', 'text': '', 'tags': '', 'url': 'W14.html'}, {'title': 'MTB_Robot', 'text': '組長 40823131 先做出 手臂程式 ，我再和組長想出要如何在coppeliasim內新增UI介面，但介面操控上還有一些問題需要改進。 \n 場景檔: \n W14GUI場景檔 (6/10製作) \n \n \n 手臂程式:(沒有UI介面) \n function sysCall_init()\n    corout=coroutine.create(coroutineMain)\nend\n \nfunction sysCall_actuation()\n    if coroutine.status(corout)~=\'dead\' then\n        local ok,errorMsg=coroutine.resume(corout)\n        if errorMsg then\n            error(debug.traceback(corout,errorMsg),2)\n        end\n    else\n        corout=coroutine.create(coroutineMain)\n    end\nend\n \nfunction movCallback(config,vel,accel,handles)\n    for i=1,#handles,1 do\n        if sim.getJointMode(handles[i])==sim.jointmode_force and sim.isDynamicallyEnabled(handles[i]) then\n            sim.setJointTargetPosition(handles[i],config[i])\n        else   \n            sim.setJointPosition(handles[i],config[i])\n        end\n    end\nend\n \nfunction moveToConfig(handles,maxVel,maxAccel,maxJerk,targetConf,enable)\n    local currentConf={}\n    for i=1,#handles,1 do\n        currentConf[i]=sim.getJointPosition(handles[i])\n        targetConf[i]=targetConf[i]*math.pi/180\n    end\n    sim.moveToConfig(-1,currentConf,nil,nil,maxVel,maxAccel,maxJerk,targetConf,nil,movCallback,handles)\n \n    if enable then\n        sim.writeCustomDataBlock(gripperHandle,\'activity\',\'on\')\n    else\n        sim.writeCustomDataBlock(gripperHandle,\'activity\',\'off\')\n    end\nend\n \nfunction coroutineMain()\n    modelBase=sim.getObjectHandle(sim.handle_self)\n    gripperHandle=sim.getObjectHandle(\'suctionPad\')\n    modelName=sim.getObjectName(modelBase)\n    motorHandles = {}\n    for i=1,4,1 do\n        motorHandles[i]=sim.getObjectHandle(\'MTB_axis\'..i)\n    end\n    local vel=60\n    local accel=10\n    local jerk=10\n    local maxVel={vel*math.pi/180,vel*math.pi/180,vel*math.pi/180,vel*math.pi/180}\n    local maxAccel={accel*math.pi/180,accel*math.pi/180,accel*math.pi/180,accel*math.pi/180}\n    local maxJerk={jerk*math.pi/180,jerk*math.pi/180,jerk*math.pi/180,jerk*math.pi/180}\n    moveToConfig(motorHandles,maxVel,maxAccel,maxJerk,{0,0,0,0},true)\n    moveToConfig(motorHandles,maxVel,maxAccel,maxJerk,{0,0,1.9,0},true)\n    moveToConfig(motorHandles,maxVel,maxAccel,maxJerk,{0,0,-1.9,0},true)\n    moveToConfig(motorHandles,maxVel,maxAccel,maxJerk,{-160,-43.5,0,203.5},false)\n    moveToConfig(motorHandles,maxVel,maxAccel,maxJerk,{160,43.5,0,203.5},false)\n    moveToConfig(motorHandles,maxVel,maxAccel,maxJerk,{160,43.5,1.90,-203.5},true)\n    moveToConfig(motorHandles,maxVel,maxAccel,maxJerk,{160,43.5,-1.90,-203.5},true)\nend \n \n 手臂程式:(包含UI介面) \n function sysCall_init()\n  --Notes can refer to the previous chapter\nxml = [[\n<ui closeable="true" onclose="closeEventHandler" resizable="true" size="220,200">\n    <label text="MTB_Robot control" wordwrap="true" />\n    \n    <group>\n        <button text="Start move" onclick = "Start_move" />\n        <button text="Stop move" onclick = "Stop_move" />\n        <stretch />\n    </group>   \n \n</ui>\n]] \n    ui=simUI.create(xml)\n\n    \n    --ui=simUI.create(xml)\n\n    Start_flag = false\n    Stop_flag = false\n    modelBase=sim.getObjectHandle(sim.handle_self)\n    gripperHandle=sim.getObjectHandle(\'suctionPad\')\n    modelName=sim.getObjectName(modelBase)\n    motorHandles = {}\n    local vel=10\n    local accel=10\n    local jerk=10\n    local maxVel={vel*math.pi/180,vel*math.pi/180,vel*math.pi/180,vel*math.pi/180}\n    local maxAccel={accel*math.pi/180,accel*math.pi/180,accel*math.pi/180,accel*math.pi/180}\n    local maxJerk={jerk*math.pi/180,jerk*math.pi/180,jerk*math.pi/180,jerk*math.pi/180}\nend\nfunction closeEventHandler(h)\n    sim.addStatusbarMessage(\'Window \'..h..\' is closing...\')\n    simUI.hide(h)\nend\nfunction Start_move(h)\n    Start_flag = true\nend\nfunction Stop_move(h)\n    Stop_flag = true   \nend\n\nfunction moveToConfig(handles,maxVel,maxAccel,maxJerk,targetConf,enable)\n    local currentConf={}\n    for i=1,#handles,1 do\n        currentConf[i]=sim.getJointPosition(handles[i])\n        targetConf[i]=targetConf[i]*math.pi/180\n    end\n    sim.moveToConfig(-1,currentConf,nil,nil,maxVel,maxAccel,maxJerk,targetConf,nil,movCallback,handles)\n\n    if enable then\n        sim.writeCustomDataBlock(gripperHandle,\'activity\',\'on\')\n    else\n        sim.writeCustomDataBlock(gripperHandle,\'activity\',\'off\')\n    end\nend\nfunction sysCall_actuation()\n        if Start_flag then\n            for i=1,#handles,1 do\n                if sim.getJointMode(handles[i])==sim.jointmode_force and sim.isDynamicallyEnabled(handles[i]) then\n                    sim.setJointTargetPosition(handles[i],config[i])\n                else    \n                    sim.setJointPosition(handles[i],config[i])\n                end\n            end\n        end\n        if Stop_flag then\n\n            sim.setJointTargetPosition(\'MTB_axis1\',0)\n            \n        end\n        \nend\n\nfunction movCallback(config,vel,accel,handles)\n    \nend\n \n\n \nfunction sysCall_cleanup()\n    -- do some clean-up here\n    simUI.destroy(ui)\nend \n 吸盤程式: \n function sysCall_init()\n    modelBase=sim.getObjectHandle(sim.handle_self)\n    s=sim.getObjectHandle(\'suctionPadSensor\')\n    l=sim.getObjectHandle(\'suctionPadLoopClosureDummy1\')\n    l2=sim.getObjectHandle(\'suctionPadLoopClosureDummy2\')\n    b=sim.getObjectHandle(\'suctionPadBodyRespondable\')\n    sim.setLinkDummy(l,-1)\n    sim.setObjectParent(l,b,true)\n    m=sim.getObjectMatrix(l2,-1)\n    sim.setObjectMatrix(l,-1,m)\n    suctionPadLink=sim.getObjectHandle(\'suctionPadLink\')\n    local gripperBase=sim.getObjectHandle(sim.handle_self)\n    infiniteStrength=true\n    maxPullForce=3\n    maxShearForce=1\n    maxPeelTorque=0.1\n \nend\n \nfunction sysCall_cleanup() \n    sim.setLinkDummy(l,-1)\n    sim.setObjectParent(l,b,true)\n    m=sim.getObjectMatrix(l2,-1)\n    sim.setObjectMatrix(l,-1,m)\nend\n \nfunction sysCall_sensing() \n    parent=sim.getObjectParent(l)\n    local on=sim.readCustomDataBlock(modelBase,\'activity\')==\'on\'\n    if not on then\n        if (parent~=b) then\n            sim.setLinkDummy(l,-1)\n            sim.setObjectParent(l,b,true)\n            m=sim.getObjectMatrix(l2,-1)\n            sim.setObjectMatrix(l,-1,m)\n        end\n    else\n        if (parent==b) then\n            index=0\n            while true do\n                shape=sim.getObjects(index,sim.object_shape_type)\n                if (shape==-1) then\n                    break\n                end\n                local res,val=sim.getObjectInt32Parameter(shape,sim.shapeintparam_respondable)\n                if (shape~=b) and (val~=0) and (sim.checkProximitySensor(s,shape)==1) then\n                    -- Ok, we found a respondable shape that was detected\n                    -- We connect to that shape:\n                    -- Make sure the two dummies are initially coincident:\n                    sim.setObjectParent(l,b,true)\n                    m=sim.getObjectMatrix(l2,-1)\n                    sim.setObjectMatrix(l,-1,m)\n                    -- Do the connection:\n                    sim.setObjectParent(l,shape,true)\n                    sim.setLinkDummy(l,l2)\n                    break\n                end\n                index=index+1\n            end\n        else\n            -- Here we have an object attached\n            if (infiniteStrength==false) then\n                -- We might have to conditionally beak it apart!\n                result,force,torque=sim.readForceSensor(suctionPadLink) -- Here we read the median value out of 5 values (check the force sensor prop. dialog)\n                if (result>0) then\n                    breakIt=false\n                    if (force[3]>maxPullForce) then breakIt=true end\n                    sf=math.sqrt(force[1]*force[1]+force[2]*force[2])\n                    if (sf>maxShearForce) then breakIt=true end\n                    if (torque[1]>maxPeelTorque) then breakIt=true end\n                    if (torque[2]>maxPeelTorque) then breakIt=true end\n                    if (breakIt) then\n                        -- We break the link:\n                        sim.setLinkDummy(l,-1)\n                        sim.setObjectParent(l,b,true)\n                        m=sim.getObjectMatrix(l2,-1)\n                        sim.setObjectMatrix(l,-1,m)\n                    end\n                end\n            end\n        end\n    end\nend \n \n', 'tags': '', 'url': 'MTB_Robot.html'}, {'title': 'W15', 'text': '', 'tags': '', 'url': 'W15.html'}, {'title': 'Geometry Translation', 'text': 'Inverse kinematics for a 2-joint robot arm using geometry  翻譯 \n \n 0:05  We saw this simple two-link robot in the previous lecture about forward kinematics. \n 我們在上一堂關於正向運動學的課程中看到這個簡單的雙連桿機構。 \n Kinematics :  運動學 \n 0:10 \n The tooltip pose of this robot is described simply by two numbers, the coordinates x and y with respect to the world coordinate frame. \n 該機構的提示框由兩個數字簡單描述，相對於世界坐標系的坐標  x  和  y 。 \n Tooltip :  提示框 \n 0:19 \n So, the problem here is that given x and y, we want to determine the joined angles, q1 and q2. \n 所以，這裡的問題是給定 x 和 y ，我們要判斷連接角 q1 和 q2 。 \n 0:25 \n The solution that we’re going to follow in this particular section is a geometric one. \n 我們利用特定幾何來解決此方案。 \n 0:29 \n We’re going to start with a simple piece of construction. \n 我們從一個簡單的結構開始。 \n 0:31 \n We’re going to overlay the red triangle on top of our robot. \n 我們在機構上覆蓋紅色三角形。 \n 0:35 \n We know that the end point coordinate is x, y, so the vertical height of the triangle is y, the horizontal width is x. \n 我們知道終點坐標是 x ， y ，所以三角形的垂直高度是 y ，水平寬度是 x 。 \n 0:43 \n And, using Pythagoras theorem, we can write r squared equals x squared plus y squared. \n 利用畢氏定理 (Pythagorean theorem) ，我們可寫出 r² = x ²+ y² \n 0:50 \n So far, so easy. \n 到目前為止很容易。 \n 0:51 \n Now, w’re going to look at this triangle highlighted here in red and we want to determine the angle alpha. \n 現在，我們查看此凸顯的紅色三角形，並確定α角。 \n 0:58 \n In order to do that, we need to use the cosine rule. \n 為了做到這一點，我們須使用餘弦定理  (Law of cosines) 。 \n 1:01 \n And, if you’re a little rusty on the cosine rule, here is a bit of a refresher. \n 如果你對餘弦定理有點生疏，這裡幫以複習一點點。 \n 1:06 \n We have an arbitrary triangle. \n 有一個任意三角形。 \n 1:08 \n We don’t have any right angles in it and we’re going to label the length of this edge as A and the angle opposite that edge, we’re going to label as little a. \n 我們沒有任何的直角，將這邊的角度標為小 a ，而對邊的長度標為 A 。 \n 1:16 \n And, we do the same for this edge and this angle, and this edge and this angle. \n 我們再對這邊和這個角，以及這邊和這個叫做同樣的事。 \n 1:21 \n So, all together, the sides are labelled capitals A, B and C, and the angles are labelled little a, little b, and little c. \n 因此所有邊都標記為 A, B, C ，角都標記為 a, b, c  。 \n 1:30 \n So, the cosine rule is simply this relationship here. \n 餘弦定理就是這種關係。 \n 1:33 \n It’s a bit like Pythagoras’ theorem except for this extra term on the end with the cos a in it. \n 它有點像畢達哥拉斯定理，除了末尾有 cos a 。 \n 1:39 \n Now, let’s apply the cosine rule to the particular triangle we looked at a moment ago. \n 將餘弦定理應用在剛看到的特定三角形。 \n 1:45 \n It’s pretty straightforward to write down this particular relationship. \n 寫下此特殊關係很簡單。 \n 1:48 \n We can isolate the term cos alpha which gives us the angle alpha that we’re interested in. \n 我們可分離出  cos α ，它給我們需要的α角度。 \n 1:53 \n And, it’s defined in terms of the constant link lengths, A1 and A2 and the position of the end effector, x and y. \n 它是根據恆定連趕長度 A1 和 A2 以及末端執行器的位置 x 和 y 定義。 \n 2:02 \n We can write this simple relationship between the angles alpha and q2. \n 我們可寫出角度α和 q2 之間的簡單關係。 \n 2:07 \n And, we know from the shape of the cosine function that cos of q2 must be equal to negative of cos alpha. \n 並且我們從餘弦函數中得知 cos q2 必須等於  –cos\xa0 α。 \n 2:13 \n This time, let’s just write an expression for the cosine of the joined angle q2. \n 寫餘弦在連接角q2的表達式。 \n 2:18 \n Now, we’re going to draw yet another red triangle and we’re going apply some simple trigonometry here. \n 我們繪製另一個紅色三角形，並應用三角函數。 \n 2:24 \n If we know q2, then we know this length and this length of the red triangle. \n 如果我們知道 q2 ，就可知道這個長度和這個三角形的長度。 \n 2:29 \n We can write this relationship for the sine of the joined angle q2. \n 我們可以在連接角 q2 寫出正弦關係。 \n 2:33 \n Now, we can consider this bigger triangle whose angle is beta and this side length of this triangle is given here in blue. \n 現在我們考慮這個大三角形，角度是β，此三角形的邊長由藍色表示。 \n 2:42 \n And, the length of the other side of the triangle is this. \n 且三角形另一邊長度是這個。 \n 2:45 \n So, now we can write an expression for the angle beta in terms of these parameters here. \n 我們可在此根據參數寫出角度β的表達式。 \n 2:52 \n Going back to the red triangle that we drew earlier, we can establish a relationship between q1 and the angle beta. \n 回到之前畫的三角形，我們可建立出 q1 和β的關係。 \n 2:59 \n Introduce yet another angle, this one gamma and we can write a relationship between the angle gamma and the tooltip coordinates x and y. \n 引入另一個角度 ɣ ，可寫出角度 ɣ 和提示座標 x 和 y 之間的關係。 \n 3:09 \n Now, we can write a simple relationship between the angles that we’ve constructed, gamma and beta and the joined angle we’re interested in which is q1. \n 現在我們可建構出角度β和 ɣ 與連接角度 q1 之間的關係。 \n 3:17 \n And, the total relationship looks something like this. \n 而且，整個關係看起來像這樣。 \n 3:20 \n Quite a complex relationship, it gives us the angle of joined one, that’s q1 in terms of the end effector coordinates y and x, and a bunch of constants, a1 and a2, and it’s also a function of the second joint angle, q2. \n 相當複雜的關係，它提供連接的角度，即末端執行器坐標  y  和  x  的  q1 ，以及一系列常數  a1  和  a2 ，它也是第二個關節角度  q2  的函數。 \n 3:36 \n So, let’s summarize what it is that we have derived here. \n 所以，總結我們在這裡得出了什麼。 \n 3:40 \n We have an expression for the cosine of q2 and we have an expression for q1. \n 我們有 q1 和 cosq2 方程式。 \n 3:45 \n Now, the cosine function is symmetrical about 0. \n 餘弦函數在 0 對稱。 \n 3:49 \n So, if we know the value of the cosine of q2, then there are two possible solutions a positive angle and a negative angle. \n 所以我們知道 cosq2 的值可能為正角和負角。 \n 3:57 \n We’re going to explicitly choose the positive angle. Which means that I can write this expression here. \n 我們選擇正角，表示我可以寫出此表達式。 \n 4:03 \n And now, we have what we call the inverse kinematic solution for this two-link robot. \n 現在我們能用逆向運動學來解決雙連桿機構。 \n 4:08 \n We have an expression for the two joined angles, q1 and q2 in terms of the end effector pose x and y, and a bunch of constants. \n 我們有兩個連接角  q1  和  q2  的表達式，根據末端執行器 x  和  y  以及一系列常量。 \n 4:17 \n You notice that the two equations are not independent. \n 注意到兩方程式不是獨立的。 \n 4:19 \n The equation for q1, in fact, depends on the solution for q2. \n 事實上， q1 方程式取決於 q2 的解。 \n 4:23 \n In this case, q2 is negative and we’re going to write the solution for q2 with a negative sign in front of the inverse cosine. \n 在這情況下， q2 為負，我們將在 q2 反餘弦的解錢加上負號。 \n 4:32 \n Now, we need to solve for q1, so we’re going to introduce this particular red triangle, the angle beta that we solved previously, and the angle gamma which is defined in terms of y and x. \n 我們需求解 q1 ，因此采用這個特定的三角形，之前求解的角度β以及根據 y 和 x 定義的角度 ɣ 。 \n 4:44 \n Now, we write a slightly different relationship between q1, gamma and beta, different to what we had before. \n q1 、 ɣ 和β之間的關西，和之前求的不同。 \n 4:50 \n There’s a change of sign involved. \n 涉及到符號的變化。 \n 4:51 \n Then, we can substitute all that previous equation and come up with this expression for q1. \n 然後我們可代換之前所有等式，並求得此 q1 表達式。 \n 4:56 \n Again, there is a change of sign here. \n 同樣，這裡的符號發生了變化。 \n 4:58 \n Previously, this was a negative sign. \n 先前，這是個負號。 \n 5:01 \n And, here in summary form is the solution for the inverse kinematics of our two-link robot when it is in this particular configuration, where q2 is negative. \n 這是雙連桿機構在此逆向運動學的總形式，其中 q2 為負。 \n 5:10 \n Let’s compare the two solutions, the case where q2 is positive and the case where q2 is negative. \n 讓我們比較兩個解決方案， q2 為正和 q2 為負的情況。 \n', 'tags': '', 'url': 'Geometry Translation.html'}, {'title': 'Algebra Translation', 'text': "Inverse kinematics for a 2-joint robot arm using algebra  翻譯 \n 0:04 \n Here we have the same two link robot as we just looked at but this time we're going tosolve it using an analytical approach , that is we're going to rely much more on algebra ,particular linear algebra rather than geometry . \n 在這裡，我們有與前一篇相同的兩連桿機械手臂，但這次我們將使用分析方法來解決它，意味著我們將更多地依賴代數，特別是使用線性代數而不是幾何。 \n 0:16 \n We have an expression E , which is the homogeneous transformation which represents the pose of the robots endefector and we looked at this in the last lecture , we can write the endefector pose as a sequence of elementary homogeneous transformations . \n 我們有一個表達式 E，它是表示機械手臂最終位置的齊次變換式，我們在上一課中看到了這一點，我們可以將最終位置寫為一系列基本齊次變換式。 \n 0:33 \n A rotation by Q1 , a translation along the X direction by A1 , a rotation by Q2 and then a translation in the X direction by A2 . \n Q1 旋轉，A1 沿 X 方向平移，Q2 旋轉，然後 A2 沿 X 方向平移。 \n 0:43 \n If I expand this out , multiply all the transformations together , I get the expression shown here ; a three by three homogeneous transformation matrix representing the pose of the robot's endefector. \n 如果我將其展開，將所有變換相乘，就會得到此處所示的表達式 E ;它是一個三乘三的齊次變換矩陣，表示機械手臂的最終的位置。 \n 0:56 \n Now for this particular two link robot , we are only interested in the position of its endefector , it's X and Y co - ordinate and they are these two elements within the homogeneous transformation matrix , so I'm going to copy those out . \n 現在對於這個特殊的兩連桿機器人，我們只對它的最終位置感興趣，與它有關的是 X 和 Y 坐標，它們是齊次變換矩陣中的這兩個元素，所以我將把它們複製出來。 \n 1:10 \n So here again is our expression for X and Y and what we're going to do is a fairly common trick , we're going to square and add these two equations and I get a relationship that looks like this . \n 所以這裡又是我們對 X 和 Y 的表達式，我們要做的是一個相當常見的技巧，我們要將它平方並將這兩個方程相加，我得到一個看起來像這樣的關係式。 \n 1:22 \n Now I can solve for the joint angle Q2 in terms of the endefector pose X and Y and the robot's constants A1 and A2. \n 現在我可以根據最終位置X和Y以及機械手臂的常數A1及A2來求出關節角度Q2。 \n 1:32 \n Now what I'm going to do is apply the sum of angles identity . \n 現在我要做的是應用角度之和的特性。 \n 1:35 \n I'm going to expand these terms, sine of Q1 plus Q2 or cos of Q1 plus Q2 and to make life a little bit easier, I'm going to make some substations, so where ever I had cos Q2, I'm going to write C2 and where ever I had sine Q2, I'm going to write S2. \n 我將展開這些項，Q1 的正弦加 Q2 或 Q1 的餘弦加 Q2，為了讓生活更輕鬆一點，我將建立一些分部，所以只要有 cos Q2，我會將其取代為C2並且在有正弦Q2的地方，我會將其取代為S2。 \n 1:51 \n It's a fairly common shorthand when people are looking at robot kinematic equations. \n 當人們解決機械手臂運動學方程式時，這是一個相當常見的快速記法。 \n 1:57 \n And here are the equations after making those substitutions. \n 這是進行替換後的方程式。 \n 2:00 \n Looking at these two equations, I can see that they fall into a very well known form and for that form there is a very well known solution. \n 看看這兩個方程式，我可以看到它們屬於一個眾所周知的形式，對於這種形式，有一個淺顯易見的解決方案。 \n 2:09 \n So I'm going to consider just one of the equations, the equation for Y and using our well known identity and it's solution, I can determine the values for the variables little a, little b and little c and once l've determined those, then I can just write down the solution for Q1, which x is the equivalent of theta in this particular case. \n 所以我將只考慮其中一個方程，Y 的方程，並使用我們眾所周知的恆等式和它的解，我可以確定變量小 a、小 b 和小 c 的值，一旦我確定了這些，然後我可以寫下 Q1 的解決方程，在這種特殊情況下，x 相當於  θ 。 \n 2:31 \n Here again is our expression for Q1, copied over from the previous slide and we may remember from earlier in our workings that we determined this particular relationship; X squared plus Y squared is equal to this particular complex expression. \n 這裡再次是我們對 Q1 的表達，從上一張幻燈片複製過來，我們可能還記得在我們早期的說明中，確定了這種特殊關係； X 平方加 Y 平方等於這個特定的複雜表達式。 \n 2:45 \n So I can substitute that in and do some simplification and I end up with this slightly less complex expression for Q1. \n 因此，我可以將其替換並進行一些簡化，最終得到 Q1 的這個稍微不那麼複雜的表達式。 \n 2:53 \n And it is the same expression that I got following the geometric approach in the previous section. \n 這與我在上一節中遵循幾何方法求出的表達式一模一樣。 \n \xa0 \n", 'tags': '', 'url': 'Algebra Translation.html'}, {'title': 'Final\xa0Project', 'text': '在和組員討論完後，決定延用stage2-ag11的主題自動化工廠，進行延伸。到了學期後半段，我們對coppeliasim的使用也更加熟悉，我們決定多加幾個機械手臂去應付在生產線會發生的事情，和改寫機械手臂程式使做動更加順暢。 \n 專案的場景檔: \n Stage3_ag1_Final Project \n 1.倉庫生產線: \n 我們在輸送帶上增加感測器，使物體到達該位置時會停止等待機械手臂夾取，並將stage2的機械手臂換成W16的 MTB Robot ，和改寫 Dobot程式 ，讓他不像stage2做動時那麼的不順暢，之後再用鍵盤操控小車子將物品運進倉庫內。 \n 運作影片: \n \n 2.生產線迴圈: \n 我們依照前一個倉庫設計提出另一個方案，若想要讓物體回到最一開始的初始點要如何製作，我們就設計出一個迴圈的場景，讓他可以一直循環運作。 \n 運作影片: \n \n', 'tags': '', 'url': 'Final\xa0Project.html'}, {'title': 'W16', 'text': '1.Onshape 零組件繪製 \n 這次作業的第2、4(for迴圈)、5皆是組長40823131所製作，將內容都分享給組員並把每一行詳細解釋給組員聽。 \n 零件圖檔連結: \n MTB_Base \n \n MTB_Link1 \n \n MTB_Link2 \n \n MTB_Link3 \n \n 製作流程: \n \n \n 2.Leo Editor 以 require 導入並運作 \n 場景檔與程式檔 \n W16_2 \n 影片: \n 匯入場景檔: \n \n 導入程式並模擬: \n \n \n 3.鍵盤操控取放 \n 利用  Leo Editor require  導入  Lua \xa0程式 \n 檔案連結: \n W16_3 \n 影片: \n \n 4.鍵盤操控取放固定位置 \n 場景檔 \n W16_4_keyboard \n 影片: \n \n 4.迴圈控制取放固定位置 \n 程式與場景檔: \n \xa0 W16_4_for \n 影片: \n \n 5.Remote API \n \xa0 W16_api \n 影片: \n \n 心得: 這次作業對我來說感覺是個不可能的任務，由於我程式不了解和對coppeliasim不熟練，導致在製作時一直發生問題，詢問組長後才發現我寫的程式問題很多，畢竟我的程式跟拼裝車一樣，隨便拼湊出來的，在組長一步一步的細心指導下瞭解FOR迴圈的製作與API的設定，這次作業讓我看到了我的不足，還許多需要改進的地方。', 'tags': '', 'url': 'W16.html'}, {'title': 'Product Install', 'text': '', 'tags': '', 'url': 'Product Install.html'}, {'title': 'stage1-ag10', 'text': 'Inventor: 達爾文船零件圖檔 \n \n Coppeliasim: 達爾文船模擬圖檔 \n \n', 'tags': '', 'url': 'stage1-ag10.html'}, {'title': 'stage2-ag1', 'text': '鍵盤操控車子 \n 感測器', 'tags': '', 'url': 'stage2-ag1.html'}]};